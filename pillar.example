# -*- coding: utf-8 -*-
# vim: ft=yaml
# yamllint disable rule:comments-indentation
---
nginx:
    # config can be specified as a dict or set to "sync".
    # In case you specify a dict, it will just manage `nginx.conf`.
    # "sync" will run a file.recurse, syncing the whole /etc/nginx directory
    # with the one found by files_switch (TOFS). The searched paths match
    # `salt://nginx/files/<tofs_var>/etc/nginx`.
    # They are processed as Jinja templates, so make sure to wrap anything
    # that is incorrectly parsed as Jinja in {% raw %}{% endraw %} tags.
  config:
    events:
      worker_connections: 768
    http:
      access_log: /var/log/nginx/access.log
      default_type: application/octet-stream
      error_log: /var/log/nginx/error.log
      gzip: 'on'
      include:
        - mime.types
        - conf.d/*.conf
        - sites-enabled/*
      sendfile: 'on'
      tcp_nopush: 'on'
      types_hash_max_size: 2048
    include:
      - modules-enabled/*.conf
    worker_processes: auto
    # Manage dh params. Mapping of name to [str, dict].
    # * If dict, will generate the file using openssl. Optional parameter is keysize,
    #   which defaults to 2048 bits. Note that using custom DHE groups is deprecated.
    # * If str, will use it as a source for file.managed (if "://" is found) or
    #   use it as the parameter to contents_pillar.
  dhparam: {}
    # Many distribution packages come with a default host. Automatically disable it.
  disable_default_host: true
    # Mapping of server name to configuration. This will look for a file in TOFS
    # salt://nginx/files/<tofs_var>/servers/[<server_name>.conf, server.conf.j2], where
    # server_name is either the key in this dict or the value specified in
    # `source_file_name`.
    # If `default/server.conf.j2` is matched, the file will take the configuration
    # specified in `config` and dump it in correct nginx syntax.
    # If `source` is specified, that will be used as the source file instead of TOFS.
  servers: {}
  # example.com:
  #   enabled: true  # enabled defaults to false
  # example.site:
  #   source_file_name: frontend
  # example.wtf:
  #   source: salt://my/very/custom/example.wtf.j2
  # host.it:
  #   config:
  #     - upstream:
  #       - server 10.1.33.7:8000
  #     - server:
  #       - listen:
  #         - 80
  #         - '[::]:80'
  #       - server_name: host.it
  #       - return: 301 https://host.it$request_uri
  #     - server:
  #       - listen:
  #           - 443
  #           - '[::]:443'
  #       - server_name: host.it
  #       - root: /var/www/host.it
  #       - server_tokens: 'off'
  #       - client_max_body_size: 512M
  #       - client_body_timeout: 300s
  #       - location /:
  #         - proxy_pass http://upstream
    # Install scripts and services that manage session ticket keys.
    # This works for systemd-based Linux distributions only.
    # Mozilla generally advises to disable them since nginx does not rotate
    # them automatically by default and thus breaks forward secrecy.
    # The scripts and services that manage the rotation have been taken
    # from https://github.com/GrapheneOS/nginx-rotate-session-ticket-keys
    # They save four key files inside a ramfs mounted to
    # dirname(lookup:config)/session-ticket-keys, usually /etc/nginx/sesion-ticket-keys
    # Use them as follows:
    #   ssl_session_ticket_key session-ticket-keys/4.key;
    #   ssl_session_ticket_key session-ticket-keys/3.key;
    #   ssl_session_ticket_key session-ticket-keys/2.key;
    #   ssl_session_ticket_key session-ticket-keys/1.key;
    # Mind that they are useless for TLS v1.3.
  session_ticket_key_rotation: false
    # Make sure some snippets are available in lookup:snippets.
    # This works the exact same way as servers does above, except that
    # enabled and source_file_name are not respected.
  snippets: {}
    # This is a convenience to automatically create webroot dirs,
    # e.g. when using certbot webroot auth module with reverse proxy only hosts.
    # It can be a list of paths or one of ["from_servers", "from_certbot"].
    # "from_servers" will result in a directory for every key in nginx:servers
    # inside nginx:lookup:webroot. "from_certbot" will cross-load the certbot
    # formula configuration and create a directory for every certbot:certs.
    # The certbot formula is found at https://github.com/lkubb/certbot-formula
  webroots: []

  lookup:
    certs: certs
    group: nginx
    pid_file: /run/nginx.pid
    pkg:
      name: nginx
      openssl: openssl
    remove_all_data_for_sure: false
    snippets: snippets
    user: nginx
    webroot: /var/www

  tofs:
      # The files_switch key serves as a selector for alternative
      # directories under the formula files directory. See TOFS pattern
      # doc for more info.
      # Note: Any value not evaluated by `config.get` will be used literally.
      # This can be used to set custom paths, as many levels deep as required.
    files_switch:
      - any/path/can/be/used/here
      - id
      - roles
      - osfinger
      - os
      - os_family

      # All aspects of path/file resolution are customisable using the options below.
      # This is unnecessary in most cases; there are sensible defaults.
      # Default path: salt://< path_prefix >/< dirs.files >/< dirs.default >
      # I.e.: salt://nginx/files/default
      # path_prefix: template_alt
      # dirs:
      #   files: files_alt
      #   default: default_alt
      # The entries under `source_files` are prepended to the default source files
      # given for the state
    source_files:
      nginx-config-file-file-managed:
        - 'example_alt.tmpl'
        - 'example_alt.tmpl.jinja'
